on: 
    workflow_call:
      inputs:
        tag:
          description: 'The version tag to use for stamping build artifacts and naming generated archives'
          required: true
          type: string
        prerelease:
          description: 'Set to true if published build is a prerelease'
          type: boolean
          required: true
      secrets:
        PACKAGE_USER:
          required: true
        PACKAGE_PAT:
          required: true
env:
  DOCKER_REPO: ghcr.io/${{ github.repository_owner }}/cxone/cxone-flow
                
jobs:
  publish-container:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226

      - name: Login to GitHub Container Registry
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
        with:
          registry: ghcr.io
          username: ${{ secrets.PACKAGE_USER }}
          password: ${{ secrets.PACKAGE_PAT }}

      - name: Fetch Code @ tag ${{ inputs.tag }}
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          ref: refs/tags/${{ inputs.tag }}

      - name: Update version.txt
        run: |
            echo __version__=\"${{ inputs.tag }}\" > _version.py

      - name: Build and Push Docker Image
        run: |
          BRIEFTAG=${{ inputs.tag }}
          docker build -f docker/Dockerfile -t $DOCKER_REPO:$BRIEFTAG .
          [ ${{ inputs.prerelease }} = false ] && docker tag $DOCKER_REPO:$BRIEFTAG $DOCKER_REPO:latest || :
          docker push --all-tags $DOCKER_REPO
  

  compile-manual:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Code @ tag ${{ inputs.tag }}
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          ref: refs/tags/${{ inputs.tag }}
        
      - name: Edit manual's version stamp
        run: echo ${{ inputs.tag }} > manual/version.tex

      - name: Build PDF Manual
        uses: xu-cheng/latex-action@f1ca82cbed861b3534e2997dd584944f55b884ed
        with:
          root_file: manual/cxone-flow.tex
          work_in_root_file_dir: true

      - name: Upload manual
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32
        with:
          name: manual
          path: manual/cxone-flow.pdf
  
      - name: Build PDF Release Notes
        uses: xu-cheng/latex-action@f1ca82cbed861b3534e2997dd584944f55b884ed
        with:
          root_file: release_notes/release_notes.tex
          work_in_root_file_dir: true

      - name: Upload release notes
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32
        with:
          name: release-notes
          path: release_notes/release_notes.pdf

  publish-release:
    runs-on: ubuntu-latest
    needs: [publish-container,compile-manual]
    steps:
      - name: Make release text
        run: |
          echo "# CxOneFlow ${{ inputs.tag }}" > release.md
          echo Executable artifacts are published in a container. >> release.md
          echo '```' >> release.md
          [ ${{ inputs.prerelease }} = false ] && echo "docker pull $DOCKER_REPO:latest" >> release.md || :
          echo "docker pull $DOCKER_REPO:${{ inputs.tag }}" >> release.md
          echo '```' >> release.md

      - name: Download manual
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: manual

      - name: Download release notes
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: release-notes

      - name: Rename documentation artifacts
        run: |
          mv cxone-flow.pdf cxone-flow-manual-${{ inputs.tag }}.pdf
          mv release_notes.pdf cxone-flow-release-notes-${{ inputs.tag }}.pdf


      - name: Create GitHub Release
        id: create_release
        uses: ncipollo/release-action@6c75be85e571768fa31b40abf38de58ba0397db5
        with:
          allowUpdates: true
          artifactErrorsFailBuild: true
          artifacts: ./*.pdf
          bodyFile: release.md
          name: ${{ inputs.tag }}
          prerelease: ${{ inputs.prerelease }}
          tag: ${{ inputs.tag }}


  artifact-cleanup:
    runs-on: ubuntu-latest
    needs: [publish-release]
    steps:
      - uses: geekyeggo/delete-artifact@9d15d164b1dcd538ff1b1a2984bc2c0240986c3b
        with:
          name: |
            release-notes
            manual
        
